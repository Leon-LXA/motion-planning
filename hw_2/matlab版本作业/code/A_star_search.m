function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
    %OPEN(OPEN_COUNT,1)=0;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM   && CLOSED_COUNT ~= MAX_X * MAX_Y 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    CLOSED_COUNT = CLOSED_COUNT - 1;
    while((xNode~=xTarget || yNode~=yTarget)  ) %you have to dicide the Conditions for while loop exit 
        gn = path_cost;
        exp_array=expand_array(xNode,yNode,gn,xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
        n_index = node_index(OPEN,xNode,yNode);
        for i=1:size(exp_array,1)            
            if(OPEN(n_index,1) == 1)
                xNode_new = exp_array(i,1);
                yNode_new = exp_array(i,2);
                num = size(OPEN,1);
                for j=1:num
                    if(xNode_new == OPEN(j,2) && yNode_new == OPEN(j,3))
                        if(exp_array(i,4) < OPEN(j,7))
                            OPEN(j,7) = exp_array(i,4);
                            OPEN(j,4) = xNode;
                            OPEN(j,5) = yNode;
                        end
                        flag = 1;
                        break;
                    else
                        flag = 0;                        
                    end    
                end
                if(flag == 0)
                    OPEN_COUNT=OPEN_COUNT+1;
                    OPEN(OPEN_COUNT,:)=insert_open(xNode_new,yNode_new,xNode,yNode,exp_array(i,3),exp_array(i,4),exp_array(i,5));
                end
                
            end
            
        end
        OPEN(n_index,1) = 0;
        i_min = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget);
        if(i_min ~= -1)
            CLOSED_COUNT=CLOSED_COUNT+1;
            CLOSED(CLOSED_COUNT,1)=xNode;
            CLOSED(CLOSED_COUNT,2)=yNode;
            xNode = OPEN(i_min, 2);
            yNode = OPEN(i_min, 3);
            path_cost = OPEN(i_min, 7);
        else
            break;
        end
        
     %
     %finish the while loop
     %
     
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   path = [];
   if(xNode == xTarget && yNode == yTarget)
        n_index = node_index(OPEN,9,9);
        xval = OPEN(n_index, 4);
        yval = OPEN(n_index, 5);
        path(1,1)=xTarget-0.5;
        path(1,2)=yTarget-0.5;
        k = 2;
        while(xval ~= xStart || yval ~= yStart)
            n_index = node_index(OPEN,xval,yval);
            path(k,1) = OPEN(n_index, 2)-0.5;
            path(k,2) = OPEN(n_index, 3)-0.5;
            xval = OPEN(n_index,4);
            yval = OPEN(n_index,5);
            k = k + 1;
        end
        path(k,1)=xStart-0.5;
        path(k,2)=yStart-0.5;
    end
end
